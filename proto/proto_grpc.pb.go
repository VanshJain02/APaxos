// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankingService_Prepare_FullMethodName           = "/proto.BankingService/Prepare"
	BankingService_Accept_FullMethodName            = "/proto.BankingService/Accept"
	BankingService_Decide_FullMethodName            = "/proto.BankingService/Decide"
	BankingService_Catchup_FullMethodName           = "/proto.BankingService/Catchup"
	BankingService_TransferMoney_FullMethodName     = "/proto.BankingService/TransferMoney"
	BankingService_SyncServerStatus_FullMethodName  = "/proto.BankingService/SyncServerStatus"
	BankingService_PrintBalance_FullMethodName      = "/proto.BankingService/PrintBalance"
	BankingService_PrintLog_FullMethodName          = "/proto.BankingService/PrintLog"
	BankingService_PrintDB_FullMethodName           = "/proto.BankingService/PrintDB"
	BankingService_PrintPerformance_FullMethodName  = "/proto.BankingService/PrintPerformance"
	BankingService_CollectAllBalance_FullMethodName = "/proto.BankingService/CollectAllBalance"
)

// BankingServiceClient is the client API for BankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingServiceClient interface {
	Prepare(ctx context.Context, in *PrepareMessage, opts ...grpc.CallOption) (*PromiseMessage, error)
	Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*AcceptedMessage, error)
	Decide(ctx context.Context, in *CommitMessage, opts ...grpc.CallOption) (*Empty, error)
	Catchup(ctx context.Context, in *CatchupMessage, opts ...grpc.CallOption) (*SyncedResponse, error)
	TransferMoney(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	SyncServerStatus(ctx context.Context, in *ServerStatus, opts ...grpc.CallOption) (*Empty, error)
	PrintBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintBalanceResponse, error)
	PrintLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintLogResponse, error)
	PrintDB(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintDBResponse, error)
	PrintPerformance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintPerformanceResponse, error)
	CollectAllBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceDetails, error)
}

type bankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingServiceClient(cc grpc.ClientConnInterface) BankingServiceClient {
	return &bankingServiceClient{cc}
}

func (c *bankingServiceClient) Prepare(ctx context.Context, in *PrepareMessage, opts ...grpc.CallOption) (*PromiseMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromiseMessage)
	err := c.cc.Invoke(ctx, BankingService_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*AcceptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptedMessage)
	err := c.cc.Invoke(ctx, BankingService_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Decide(ctx context.Context, in *CommitMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankingService_Decide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Catchup(ctx context.Context, in *CatchupMessage, opts ...grpc.CallOption) (*SyncedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncedResponse)
	err := c.cc.Invoke(ctx, BankingService_Catchup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) TransferMoney(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BankingService_TransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) SyncServerStatus(ctx context.Context, in *ServerStatus, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankingService_SyncServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) PrintBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintBalanceResponse)
	err := c.cc.Invoke(ctx, BankingService_PrintBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) PrintLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintLogResponse)
	err := c.cc.Invoke(ctx, BankingService_PrintLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) PrintDB(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintDBResponse)
	err := c.cc.Invoke(ctx, BankingService_PrintDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) PrintPerformance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintPerformanceResponse)
	err := c.cc.Invoke(ctx, BankingService_PrintPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CollectAllBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceDetails)
	err := c.cc.Invoke(ctx, BankingService_CollectAllBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServiceServer is the server API for BankingService service.
// All implementations must embed UnimplementedBankingServiceServer
// for forward compatibility.
type BankingServiceServer interface {
	Prepare(context.Context, *PrepareMessage) (*PromiseMessage, error)
	Accept(context.Context, *AcceptMessage) (*AcceptedMessage, error)
	Decide(context.Context, *CommitMessage) (*Empty, error)
	Catchup(context.Context, *CatchupMessage) (*SyncedResponse, error)
	TransferMoney(context.Context, *TransferRequest) (*TransactionResponse, error)
	SyncServerStatus(context.Context, *ServerStatus) (*Empty, error)
	PrintBalance(context.Context, *Empty) (*PrintBalanceResponse, error)
	PrintLog(context.Context, *Empty) (*PrintLogResponse, error)
	PrintDB(context.Context, *Empty) (*PrintDBResponse, error)
	PrintPerformance(context.Context, *Empty) (*PrintPerformanceResponse, error)
	CollectAllBalance(context.Context, *Empty) (*BalanceDetails, error)
	mustEmbedUnimplementedBankingServiceServer()
}

// UnimplementedBankingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankingServiceServer struct{}

func (UnimplementedBankingServiceServer) Prepare(context.Context, *PrepareMessage) (*PromiseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedBankingServiceServer) Accept(context.Context, *AcceptMessage) (*AcceptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedBankingServiceServer) Decide(context.Context, *CommitMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decide not implemented")
}
func (UnimplementedBankingServiceServer) Catchup(context.Context, *CatchupMessage) (*SyncedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Catchup not implemented")
}
func (UnimplementedBankingServiceServer) TransferMoney(context.Context, *TransferRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (UnimplementedBankingServiceServer) SyncServerStatus(context.Context, *ServerStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncServerStatus not implemented")
}
func (UnimplementedBankingServiceServer) PrintBalance(context.Context, *Empty) (*PrintBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintBalance not implemented")
}
func (UnimplementedBankingServiceServer) PrintLog(context.Context, *Empty) (*PrintLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintLog not implemented")
}
func (UnimplementedBankingServiceServer) PrintDB(context.Context, *Empty) (*PrintDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintDB not implemented")
}
func (UnimplementedBankingServiceServer) PrintPerformance(context.Context, *Empty) (*PrintPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintPerformance not implemented")
}
func (UnimplementedBankingServiceServer) CollectAllBalance(context.Context, *Empty) (*BalanceDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAllBalance not implemented")
}
func (UnimplementedBankingServiceServer) mustEmbedUnimplementedBankingServiceServer() {}
func (UnimplementedBankingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServiceServer will
// result in compilation errors.
type UnsafeBankingServiceServer interface {
	mustEmbedUnimplementedBankingServiceServer()
}

func RegisterBankingServiceServer(s grpc.ServiceRegistrar, srv BankingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankingService_ServiceDesc, srv)
}

func _BankingService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Prepare(ctx, req.(*PrepareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Accept(ctx, req.(*AcceptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Decide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Decide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Decide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Decide(ctx, req.(*CommitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Catchup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatchupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Catchup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Catchup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Catchup(ctx, req.(*CatchupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_TransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).TransferMoney(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_SyncServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).SyncServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_SyncServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).SyncServerStatus(ctx, req.(*ServerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_PrintBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).PrintBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_PrintBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).PrintBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_PrintLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).PrintLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_PrintLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).PrintLog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_PrintDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).PrintDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_PrintDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).PrintDB(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_PrintPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).PrintPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_PrintPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).PrintPerformance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CollectAllBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CollectAllBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CollectAllBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CollectAllBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BankingService_ServiceDesc is the grpc.ServiceDesc for BankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BankingService",
	HandlerType: (*BankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _BankingService_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _BankingService_Accept_Handler,
		},
		{
			MethodName: "Decide",
			Handler:    _BankingService_Decide_Handler,
		},
		{
			MethodName: "Catchup",
			Handler:    _BankingService_Catchup_Handler,
		},
		{
			MethodName: "TransferMoney",
			Handler:    _BankingService_TransferMoney_Handler,
		},
		{
			MethodName: "SyncServerStatus",
			Handler:    _BankingService_SyncServerStatus_Handler,
		},
		{
			MethodName: "PrintBalance",
			Handler:    _BankingService_PrintBalance_Handler,
		},
		{
			MethodName: "PrintLog",
			Handler:    _BankingService_PrintLog_Handler,
		},
		{
			MethodName: "PrintDB",
			Handler:    _BankingService_PrintDB_Handler,
		},
		{
			MethodName: "PrintPerformance",
			Handler:    _BankingService_PrintPerformance_Handler,
		},
		{
			MethodName: "CollectAllBalance",
			Handler:    _BankingService_CollectAllBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
